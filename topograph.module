<?php

/**
 * @file
 * Topograph provides views that give you the lay of your site's architecture.
 */

require_once 'includes/topograph_views_menus.inc';
require_once 'includes/topograph_views_nodes.inc';
require_once 'includes/topograph_views_block.inc';
require_once 'includes/topograph_views_fields.inc';
require_once 'includes/handlers/topograph_nodetype_menus.inc';
require_once 'includes/handlers/topograph_nodetype_options.inc';
require_once 'includes/handlers/topograph_nodetype_preview.inc';
require_once 'includes/handlers/topograph_nodetype_submitted.inc';
require_once 'includes/handlers/topograph_field_instance_label.inc';

/**
 * Implements hook_permission().
 *
 * Provide a permission for administering this module.
 */
function topograph_permission() {
  return array(
    'use topograph' => array(
      'title' => t('Use the Topograph module'),
      'description' => t('See stuff provided by the Topograph module.'),
    ),
  );
}

/**
 * Implementation of hook_views_api().
 */
function topograph_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'topograph'),
  );
}

/**
 * Implements hook_form_alter().
 */
function topograph_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#id'] == 'views-exposed-form-topograph-list-all-blocks-page-1') {
  // Get list of regions as options for filters.
    $results = db_select('block', 'b')
        ->fields('b')
        ->execute()
        ->fetchAll();
    $regions = array();
    $themes = array();
    foreach ($results as $result) {
      $regions[$result->region] = $result->region;
      $themes[$result->theme] = $result->theme;
    }
    $regions = array_unique($regions);
    $regions['-1'] = '[none]';
    $form['Region']['#type'] = 'select';
    $form['Region']['#options'] = $regions;
    $form['Region']['#size'] = max(count($themes), count($regions));
    $form['Theme']['#type'] = 'select';
    $form['Theme']['#options'] = $themes;
    $form['Theme']['#size'] = max(count($themes), count($regions));
  }
}

/**
 * Implements hook_views_default_views().
 */
function topograph_views_default_views() {
  $views = array();
  $view = topograph_list_all_menus();
  $views[$view->name] = $view;
  $view = topograph_list_all_nodetypes();
  $views[$view->name] = $view;
  $view = topograph_list_all_blocks();
  $views[$view->name] = $view;
  $view = topograph_list_all_fields();
  $views[$view->name] = $view;
  return $views;
}

/**
 * hook_views_data().
 */
function topograph_views_data() {
  $data = array();

  $data['menu_links'] = topograph_menu_data();
  $data['node_type'] = topograph_node_data();
  $data['block'] = topograph_block_data();
  $data['field_config'] = topograph_field_data();
  $data['field_config_instance'] = topograph_field_instance_data();


  // Join node_type to field_config via field_config_instance.
  $data['node_type']['table']['join']['field_config'] = array(
    'left_table' => 'field_config_instance',
    'left_field' => 'bundle',
    'field' => 'type',
  );
  // Join field_config_instance to field_config, which is our base table.
  $data['field_config_instance']['table']['join']['field_config'] = array(
    'left_field' => 'id',
    'field' => 'field_id',
  );
  return $data;
}
